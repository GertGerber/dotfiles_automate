---
# main.yml
# Runs roles resolved from profile + OS overrides + exclusions.
# Uses gather_facts to detect the OS, then computes and optionally writes default_roles.yml.

- name: Run selected roles
  hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - group_vars/all.yml

  vars:
    # Pin important roles to the top of default_roles (if present)
    anchor_roles: ['system']
    # Write a generated snapshot to default_roles.yml (set false to skip)
    materialise_default_roles: true
    # Tags that are "meta" and not treated as role names
    special_tags: ['all', 'always']

  tasks:
    # ---------------------------
    # Resolve profile â†’ default_roles
    # ---------------------------

    - name: Validate run_profile exists
      ansible.builtin.assert:
        that:
          - run_profile in role_profiles.keys()
        fail_msg: "Invalid run_profile '{{ run_profile }}'. Valid options: {{ role_profiles.keys() | list }}"
        success_msg: "Using run_profile='{{ run_profile }}'"
      tags: [always]

    - name: Normalise OS key for overrides
      ansible.builtin.set_fact:
        _os_key: >-
          {{ 'Windows' if ansible_system in ['Win32NT', 'Windows'] else ansible_system }}
      tags: [always]

    - name: Resolve OS-specific extra roles
      ansible.builtin.set_fact:
        _os_extra_roles: "{{ os_role_overrides.get(_os_key, []) | default([]) }}"
      tags: [always]

    - name: Build selected roles from profile + OS extras
      ansible.builtin.set_fact:
        _selected_roles: >-
          {{ (role_profiles[run_profile] | default(role_profiles['minimal'])) + _os_extra_roles }}
      tags: [always]

    - name: Apply exclusions, dedupe, sort
      ansible.builtin.set_fact:
        _final_sorted_roles: >-
          {{ (_selected_roles | difference(exclude_roles | default([])) | unique | sort) }}
      tags: [always]

    - name: Compose default_roles with anchors first
      ansible.builtin.set_fact:
        default_roles: >-
          {{ anchor_roles + (_final_sorted_roles | difference(anchor_roles)) }}
      tags: [always]

    # ---------------------------
    # Optional: materialise snapshot
    # ---------------------------

    - name: Write default_roles.yml snapshot (optional)
      when: materialise_default_roles | bool
      vars:
        output_path: "{{ playbook_dir }}/default_roles.yml"
      ansible.builtin.copy:
        dest: "{{ output_path }}"
        mode: "0644"
        content: |
          # Generated by main.yml
          # Profile: {{ run_profile }}
          # OS: {{ _os_key }}
          default_roles:
          {% for r in default_roles %}
            - {{ r }}
          {% endfor %}
          {% if exclude_roles | default([]) | length > 0 %}
          # Excluded by configuration:
          {% for r in exclude_roles %}
          # - {{ r }}
          {% endfor %}
          {% endif %}
      tags: [always]

    # ---------------------------
    # Discover roles and decide what to run
    # ---------------------------

    - name: Discover available roles in roles/ directory
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/roles"
        file_type: directory
        depth: 1
      register: role_dirs
      tags: [always]

    - name: Compute available role names
      ansible.builtin.set_fact:
        available_roles: "{{ role_dirs.files | map(attribute='path') | map('basename') | list | difference(['roles']) }}"
      tags: [always]

    - name: Compute role tags provided by user (excluding special tags)
      ansible.builtin.set_fact:
        user_role_tags: "{{ (ansible_run_tags | difference(special_tags)) | intersect(available_roles) }}"
      tags: [always]

    - name: Compute roles to run (prefer user tags if any, else defaults)
      ansible.builtin.set_fact:
        run_roles: >-
          {{
            (user_role_tags | length > 0)
              | ternary(user_role_tags, default_roles | default([]))
            | difference(exclude_roles | default([]))
            | intersect(available_roles)
            | unique
            | sort
          }}
      tags: [always]

    - name: Show resolved roles (diagnostic)
      ansible.builtin.debug:
        msg:
          run_roles: "{{ run_roles }}"
          available_roles: "{{ available_roles }}"
          user_role_tags: "{{ user_role_tags }}"
          default_roles: "{{ default_roles | default([]) }}"
          exclude_roles: "{{ exclude_roles | default([]) }}"
      tags: [always]

    - name: No roles resolved - provide hint
      ansible.builtin.debug:
        msg:
          - "No roles to run. Ensure roles exist under {{ playbook_dir }}/roles and profile/exclusions are correct in group_vars/all.yml."
      when: run_roles | length == 0
      tags: [always]

    - name: Abort if no roles are resolved
      ansible.builtin.fail:
        msg: "No roles to run. Check roles/ and group_vars/all.yml."
      when: run_roles | length == 0
      tags: [always]

    # ---------------------------
    # Execute roles
    # ---------------------------

    - name: Run roles
      ansible.builtin.include_role:
        name: "{{ roles_item }}"
        apply:
          tags: ["{{ roles_item }}"]
      loop: "{{ run_roles }}"
      loop_control:
        loop_var: roles_item
      when: run_roles | length > 0
      tags: [always]
