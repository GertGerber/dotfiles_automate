---
- name: "Bash | Ubuntu/WSL only"
  ansible.builtin.assert:
    that:
      - ansible_distribution == 'Ubuntu'
    fail_msg: "This role supports Ubuntu 24.04 (incl. WSL) only."
    success_msg: "Ubuntu detected."
  tags: [bash]

- name: "Bash | Ensure prerequisites (curl, wget, git)"
  ansible.builtin.apt:
    name:
      - curl
      - wget
      - git
    state: present
    update_cache: true
  become: true
  tags: [bash, prereq]

- name: "Bash | Check if Oh My Bash is already installed"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.oh-my-bash"
  register: omb_dir
  tags: [bash, install]

- name: "Bash | Install Oh My Bash via curl"
  ansible.builtin.shell: >
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.oh-my-bash"
  when:
    - not omb_dir.stat.exists
    - bash_install_method | lower == 'curl'
  changed_when: true
  tags: [bash, install]

- name: "Bash | Install Oh My Bash via wget"
  ansible.builtin.shell: >
    bash -c "$(wget https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh -O -)"
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.oh-my-bash"
  when:
    - not omb_dir.stat.exists
    - bash_install_method | lower == 'wget'
  changed_when: true
  tags: [bash, install]

- name: "Bash | Ensure ~/.bash_profile sources ~/.bashrc"
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bash_profile"
    create: true
    block: |
      if [[ -f ~/.bashrc ]]; then
        source ~/.bashrc
      fi
  tags: [bash, profile]

# --------------------
# Themes & Plugins
# --------------------
- name: "Bash | Ensure OMB custom directories exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ ansible_env.HOME }}/.oh-my-bash/custom/themes"
    - "{{ ansible_env.HOME }}/.oh-my-bash/custom/plugins"
  when: omb_dir.stat.exists or (bash_force_custom | bool)
  tags: [bash, themes, plugins]

- name: "Bash | Deploy custom theme(s)"
  ansible.builtin.copy:
    src: "themes/{{ item.src }}"
    dest: "{{ ansible_env.HOME }}/.oh-my-bash/custom/themes/{{ item.dest }}"
    mode: "0644"
  loop: "{{ bash_custom_themes }}"
  when:
    - (omb_dir.stat.exists or (bash_force_custom | bool))
    - bash_custom_themes | length > 0
  tags: [bash, themes]

- name: "Bash | Deploy custom plugin(s)"
  ansible.builtin.copy:
    src: "plugins/{{ item }}/{{ item }}.plugin.sh"
    dest: "{{ ansible_env.HOME }}/.oh-my-bash/custom/plugins/{{ item }}/{{ item }}.plugin.sh"
    mode: "0644"
  loop: "{{ bash_custom_plugins }}"
  when:
    - (omb_dir.stat.exists or (bash_force_custom | bool))
    - bash_custom_plugins | length > 0
  tags: [bash, plugins]

- name: "Bash | Configure theme and plugins in ~/.bashrc (managed block)"
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    insertafter: BOF
    marker: "# {mark} ANSIBLE MANAGED OMB CONFIG"
    block: |
      # Oh My Bash managed configuration
      export OSH_THEME="{{ bash_theme }}"
      plugins=({{ bash_plugins | join(' ') }})
  when: bash_manage_rc_block | bool
  tags: [bash, config]

- name: "Bash | Install full .bashrc template (opt-in)"
  ansible.builtin.template:
    src: "bashrc.j2"
    dest: "{{ ansible_env.HOME }}/.bashrc"
    mode: "0644"
    backup: true
  when: bash_manage_rc_template | bool
  tags: [bash, config, template]
