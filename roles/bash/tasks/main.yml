---
# Detect current state
- name: "Bash | Detect oh-my-bash"
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.oh-my-bash"
  register: ohmybash

- name: "Bash | Register oh-my-bash state"
  ansible.builtin.set_fact:
    ohmybash_is_installed: "{{ ohmybash.stat.exists }}"

- name: "Bash | Debug ohmybash_is_installed"
  ansible.builtin.debug:
    var: ohmybash_is_installed

# Install Oh My Bash (idempotent)
- name: "Bash | Install oh-my-bash"
  when: not ohmybash_is_installed
  block:
    - name: "Bash | Download oh-my-bash install script"
      ansible.builtin.get_url:
        url: "{{ ohmybash_install_url | default('https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh') }}"
        dest: "{{ ansible_user_dir }}/oh-my-bash.install.sh"
        mode: "0755"
        force: true
        checksum: "{{ ohmybash_install_checksum | default(omit) }}"
      notify:
        - "Bash | Cleanup oh-my-bash install script"

    # Use shell/command to execute the remote script we just downloaded
    - name: "Bash | Run the oh-my-bash installer"
      ansible.builtin.shell: "bash {{ ansible_user_dir }}/oh-my-bash.install.sh"
      args:
        executable: /bin/bash

# User config files
- name: "Bash | Copy .bashrc"
  ansible.builtin.copy:
    src: ".bashrc"
    dest: "{{ ansible_user_dir }}/.bashrc"
    mode: "0644"

- name: "Bash | Copy .profile"
  ansible.builtin.copy:
    src: ".profile"
    dest: "{{ ansible_user_dir }}/.profile"
    mode: "0644"

# Ensure macOS / login shells source .bashrc as per upstream guidance
- name: "Bash | Ensure ~/.bash_profile sources ~/.bashrc"
  ansible.builtin.blockinfile:
    path: "{{ ansible_user_dir }}/.bash_profile"
    create: true
    mode: "0644"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: source .bashrc"
    block: |
      if [[ -f ~/.bashrc ]]; then
        source ~/.bashrc
      fi

# ~/.bash_private from vault (if provided)
- name: "Bash | Write ~/.bash_private when secrets provided"
  ansible.builtin.template:
    src: ".bash_private.j2"
    dest: "{{ ansible_user_dir }}/.bash_private"
    mode: "0600"
  when: bash_private is defined

# Ensure directories then copy config/theme
- name: "Bash | Ensure ~/.config exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config"
    state: directory
    mode: "0755"

- name: "Bash | Ensure ~/.config/bash exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/bash"
    state: directory
    mode: "0755"

- name: "Bash | Copy custom bash config"
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/.config/"
    src: "bash"
    mode: "0644"
    directory_mode: "0755"
    force: true

- name: "Bash | Ensure custom theme directory exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.oh-my-bash/custom"
    state: directory
    mode: "0755"

- name: "Bash | Copy custom bash theme"
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/.oh-my-bash/custom/"
    src: "themes"
    directory_mode: "0755"
    mode: "0644"
    force: true

# OS-specific config selection and copy
- name: "Bash | {{ ansible_distribution }} | Identify distribution config"
  ansible.builtin.stat:
    path: "{{ role_path }}/files/os/{{ ansible_distribution }}"
  register: bash_os_distribution_config

- name: "Bash | {{ ansible_os_family }} | Identify os family config"
  ansible.builtin.stat:
    path: "{{ role_path }}/files/os/{{ ansible_os_family }}"
  register: bash_os_family_config
  when: not bash_os_distribution_config.stat.exists

- name: "Bash | Calculate os config src"
  ansible.builtin.set_fact:
    bash_os_config: "{{ bash_os_distribution_config if bash_os_distribution_config.stat.exists else bash_os_family_config }}"

- name: "Bash | Copy custom bash config for os: {{ bash_os_config.stat.path | basename }}"
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/.config/bash/"
    src: "{{ bash_os_config.stat.path }}/"
    mode: "0644"
    force: true
  when:
    - bash_os_config is defined
    - bash_os_config.stat.exists
