---
# Detect current state
- name: "Bash | Detect oh-my-bash dir"
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.oh-my-bash"
  register: ohmybash_dir

- name: "Bash | Register oh-my-bash state"
  ansible.builtin.set_fact:
    ohmybash_is_installed: "{{ ohmybash_dir.stat.exists }}"

- name: "Bash | Debug ohmybash_is_installed"
  ansible.builtin.debug:
    var: ohmybash_is_installed

# --- Prerequisites -----------------------------------------------------------

- name: "Bash | Check git present"
  ansible.builtin.command: "bash -lc 'command -v git'"
  register: git_check
  changed_when: false
  failed_when: git_check.rc != 0

- name: "Bash | Check curl or wget present"
  ansible.builtin.shell: |
    set -e
    if command -v curl >/dev/null 2>&1 || command -v wget >/dev/null 2>&1; then
      exit 0
    else
      exit 1
    fi
  register: fetch_check
  changed_when: false
  failed_when: fetch_check.rc != 0

# --- Install via official script (first choice) ------------------------------

- name: "Bash | Install oh-my-bash via installer"
  when: not ohmybash_is_installed
  block:
    - name: "Bash | Download oh-my-bash install script"
      ansible.builtin.get_url:
        url: "{{ ohmybash_install_url | default('https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh') }}"
        dest: "{{ ansible_user_dir }}/oh-my-bash.install.sh"
        mode: "0755"
        force: true
        checksum: "{{ ohmybash_install_checksum | default(omit) }}"
      notify:
        - "Bash | Cleanup oh-my-bash install script"

    - name: "Bash | Run the oh-my-bash installer"
      ansible.builtin.shell: "bash {{ ansible_user_dir }}/oh-my-bash.install.sh"
      args:
        executable: /bin/bash

# --- Post-install validation and fallback clone ------------------------------

- name: "Bash | Stat core files"
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ ansible_user_dir }}/.oh-my-bash/oh-my-bash.sh"
    - "{{ ansible_user_dir }}/.oh-my-bash/lib/omb-deprecate.bash"
    - "{{ ansible_user_dir }}/.oh-my-bash/lib/omb-prompt-colors.bash"
  register: omb_core_stats

- name: "Bash | Determine install validity"
  ansible.builtin.set_fact:
    omb_install_valid: "{{ omb_core_stats.results | map(attribute='stat.exists') | list | min }}"

- name: "Bash | Debug install validity"
  ansible.builtin.debug:
    var: omb_install_valid

# If installer failed or produced a partial tree, do a clean clone
- name: "Bash | Fallback to clean clone (force)"
  when: not omb_install_valid | bool
  block:
    - name: "Bash | Remove partial ~/.oh-my-bash"
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.oh-my-bash"
        state: absent

    - name: "Bash | Git clone oh-my-bash"
      ansible.builtin.git:
        repo: "https://github.com/ohmybash/oh-my-bash.git"
        dest: "{{ ansible_user_dir }}/.oh-my-bash"
        version: "{{ ohmybash_version | default('master') }}"
        depth: 1
        force: true

# --- User shell config -------------------------------------------------------

- name: "Bash | Copy .bashrc"
  ansible.builtin.copy:
    src: ".bashrc"
    dest: "{{ ansible_user_dir }}/.bashrc"
    mode: "0644"

- name: "Bash | Copy .profile"
  ansible.builtin.copy:
    src: ".profile"
    dest: "{{ ansible_user_dir }}/.profile"
    mode: "0644"

- name: "Bash | Ensure ~/.bash_profile sources ~/.bashrc"
  ansible.builtin.blockinfile:
    path: "{{ ansible_user_dir }}/.bash_profile"
    create: true
    mode: "0644"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: source .bashrc"
    block: |
      if [[ -f ~/.bashrc ]]; then
        source ~/.bashrc
      fi

- name: "Bash | Write ~/.bash_private when secrets provided"
  ansible.builtin.template:
    src: ".bash_private.j2"
    dest: "{{ ansible_user_dir }}/.bash_private"
    mode: "0600"
  when: bash_private is defined

# --- Custom config and theme -------------------------------------------------

- name: "Bash | Ensure ~/.config exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config"
    state: directory
    mode: "0755"

- name: "Bash | Ensure ~/.config/bash exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/bash"
    state: directory
    mode: "0755"

- name: "Bash | Copy custom bash config"
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/.config/"
    src: "bash"
    mode: "0644"
    directory_mode: "0755"
    force: true

- name: "Bash | Ensure custom theme directory exists"
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.oh-my-bash/custom"
